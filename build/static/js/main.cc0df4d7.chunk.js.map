{"version":3,"sources":["App.js","serviceWorker.js","index.js","happyDoge.jpg","sadDoge.jpg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","response","wrap","_context","prev","next","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","post","state","sent","text","setState","responseStatus","status","console","log","stop","_x","apply","arguments","renderDoge","react_default","createElement","src","happyDoge","className","alt","sadDoge","renderInfoMessage","responseToPost","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"sTAkEeA,qBA5Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,aAVmB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAUJ,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbL,EAAEM,iBADWH,EAAAE,KAAA,EAEUE,MAAM,cAAe,CAC1CC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,KAAM5B,EAAK6B,MAAMD,SAP7B,cAEPb,EAFOE,EAAAa,KAAAb,EAAAE,KAAA,EAUMJ,EAASgB,OAVf,OAAAd,EAAAa,KAYb9B,EAAKgC,SAAS,CAAEC,eAAgBlB,EAASmB,SACzCC,QAAQC,IAAIrB,GAbC,wBAAAE,EAAAoB,SAAAxB,MAVI,gBAAAyB,GAAA,OAAA9B,EAAA+B,MAAApC,KAAAqC,YAAA,GAAAxC,EA0BnByC,WAAa,WACX,OAAkC,MAA9BzC,EAAK6B,MAAMI,gBAAwD,IAA9BjC,EAAK6B,MAAMI,eAC3CS,EAAA/B,EAAAgC,cAAA,OAAKC,IAAKC,IAAWC,UAAU,OAAOC,IAAI,QAE5CL,EAAA/B,EAAAgC,cAAA,OAAKC,IAAKI,IAASF,UAAU,OAAOC,IAAI,SA9B9B/C,EAiCnBiD,kBAAoB,WAClB,OAAkC,MAA9BjD,EAAK6B,MAAMI,eACN,6CACgC,MAA9BjC,EAAK6B,MAAMI,eACb,+CACgC,MAA9BjC,EAAK6B,MAAMI,eACb,kDAEF,IAvCPjC,EAAK6B,MAAQ,CACXd,SAAU,GACVa,KAAM,GACNsB,eAAgB,GAChBjB,eAAgB,GANDjC,wEA6CjB,OACE0C,EAAA/B,EAAAgC,cAAA,OAAKG,UAAU,OACbJ,EAAA/B,EAAAgC,cAAA,UAAQG,UAAU,cAChBJ,EAAA/B,EAAAgC,cAAA,iCACCxC,KAAKsC,aACNC,EAAA/B,EAAAgC,cAAA,WACED,EAAA/B,EAAAgC,cAAA,UAAQQ,QAAShD,KAAKI,cAAtB,yBAEFmC,EAAA/B,EAAAgC,cAAA,WAAMxC,KAAK8C,8BAtDHG,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAA/B,EAAAgC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.cc0df4d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport happyDoge from \"./happyDoge.jpg\";\nimport sadDoge from \"./sadDoge.jpg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: \"\",\n      post: \"\",\n      responseToPost: \"\",\n      responseStatus: 0\n    };\n  }\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch(\"/api/killme\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ post: this.state.post })\n    });\n\n    const body = await response.text();\n\n    this.setState({ responseStatus: response.status });\n    console.log(response);\n  };\n\n  renderDoge = () => {\n    if (this.state.responseStatus === 200 || this.state.responseStatus === 0) {\n      return <img src={happyDoge} className=\"doge\" alt=\"img\" />;\n    }\n    return <img src={sadDoge} className=\"doge\" alt=\"img\" />;\n  };\n\n  renderInfoMessage = () => {\n    if (this.state.responseStatus === 200) {\n      return \"Hey you didn't break the server this time!\";\n    } else if (this.state.responseStatus === 505) {\n      return \"Whoops - You killed the server! ðŸ‘»\";\n    } else if (this.state.responseStatus === 500) {\n      return \"The server is down. Did you restart the server?\";\n    }\n    return \"\";\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span>DevOps Sample App</span>\n          {this.renderDoge()}\n          <div>\n            <button onClick={this.handleSubmit}>Click me, I dare you</button>\n          </div>\n          <div>{this.renderInfoMessage()}</div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/happyDoge.1a88994d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sadDoge.c7a07c44.jpg\";"],"sourceRoot":""}